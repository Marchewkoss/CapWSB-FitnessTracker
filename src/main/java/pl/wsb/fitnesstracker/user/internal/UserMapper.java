package pl.wsb.fitnesstracker.user.internal;

import org.springframework.stereotype.Component;
import pl.wsb.fitnesstracker.user.api.User;
import pl.wsb.fitnesstracker.user.api.UserByEmail;
import pl.wsb.fitnesstracker.user.api.UserDto;

@Component
class UserMapper {

    /**
     * Converts a {@link User} entity to a full {@link UserDto}.
     *
     * @param user the user entity to convert
     * @return a full user DTO containing all relevant fields
     */
    UserDto toDto(User user) {
        return new UserDto(user.getId(),
                user.getFirstName(),
                user.getLastName(),
                user.getBirthdate(),
                user.getEmail());
    }

    /**
     * Maps a {@link UserDto} to a {@link User} entity.
     * The ID is not passed to the entity, assuming it's generated by the system.
     *
     * @param userDto the data transfer object received from the client
     * @return a {@link User} entity without the ID field
     */
    User toEntity(UserDto userDto) {
        return new User(
                userDto.firstName(),
                userDto.lastName(),
                userDto.birthdate(),
                userDto.email());
    }

    /**
     * Converts a {@link User} to a simplified {@link UserByEmail} DTO containing only ID and email.
     * This is typically used for search results or email-based lookups.
     *
     * @param user the user entity to transform
     * @return a lightweight DTO with ID and email only
     */
    UserByEmail toEmail(User user) {
        return new UserByEmail(user.getId(), user.getEmail());
    }
}
